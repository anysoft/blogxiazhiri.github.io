<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏之日</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xiazhiri.com/"/>
  <updated>2018-03-22T08:49:29.000Z</updated>
  <id>http://blog.xiazhiri.com/</id>
  
  <author>
    <name>likaci</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MacBook Pro 2016 充电功率</title>
    <link href="http://blog.xiazhiri.com/macbook-pro-2016-power-charging.html"/>
    <id>http://blog.xiazhiri.com/macbook-pro-2016-power-charging.html</id>
    <published>2018-03-22T08:04:00.000Z</published>
    <updated>2018-03-22T08:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天服役一年多的洋垃圾 Dell TB15 挂掉了, 表现是只能充电, 提示 usb 设备耗电过多被禁用.<br><img src="/media/15217070975539.jpg" alt=""></p><p>查了几个拓展坞都在价格承受范围之外(流下了穷人的眼泪), 最后决定再买个电源配合之前买的华为 MateDock 用.<br>参考了充电头网 <a href="http://www.chongdiantou.com/wp/archives/21716.html" target="_blank" rel="noopener">Macbook的好搭档 60~65W USB PD充电器推荐</a>, 最后选择了网易智造的65W充电器.</p><p>测试结果如下:</p><table><thead><tr><th>充电器(标称功率)</th><th>充电线</th><th>系统详情功率</th><th>显示充电器详情</th></tr></thead><tbody><tr><td>原装 (87W)</td><td>原装线</td><td>86W</td><td>Y</td></tr><tr><td>原装 (87W)</td><td>微软 Dock 线</td><td>60W</td><td>Y</td></tr><tr><td>网易智造 (65W)</td><td>原装线</td><td>65W</td><td>N</td></tr><tr><td>网易智造 (65W)</td><td>微软 Dock 线</td><td>60W</td><td>N</td></tr><tr><td>Dell TB15 (180W电源)</td><td>-</td><td>58W</td><td>N</td></tr><tr><td>原装 (87W)</td><td>原装线 -&gt; 华为 MateDock</td><td>51W</td><td>N</td></tr></tbody></table><p>##结论</p><ul><li>Dell TB15 供电 58W 使用一年多没有过供电不足的情况, 58W 在中等压力下其实已经够用.</li><li>网易智造65W 充电器 + 微软 Dock 线 够用/实惠.</li><li>华为 MateDock 外接显示器长时间使用温度 60+℃.</li><li>充电功率与 充电器 和 充电线 都有关系.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天服役一年多的洋垃圾 Dell TB15 挂掉了, 表现是只能充电, 提示 usb 设备耗电过多被禁用.&lt;br&gt;&lt;img src=&quot;/media/15217070975539.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;查了几个拓展坞都在价格承受范围之外(流下了穷人的眼泪)
      
    
    </summary>
    
    
      <category term="MacBook" scheme="http://blog.xiazhiri.com/tags/MacBook/"/>
    
  </entry>
  
  <entry>
    <title>电信阿里鱼卡 UC 免流原理</title>
    <link href="http://blog.xiazhiri.com/china-telecom-ali-free-flow.html"/>
    <id>http://blog.xiazhiri.com/china-telecom-ali-free-flow.html</id>
    <published>2017-12-05T07:39:10.000Z</published>
    <updated>2017-12-05T09:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>上个月和电信客服扯皮两周多终于把手机套餐改成了阿里鱼卡套餐。<br>从 59RMB (500MB+100分钟通话) 的<del>高端</del>套餐改成了 19RMB(1GB+100分钟+日租+阿里文娱应用免流) <del>低端</del>套餐。<br>实在要吐槽一下电信改套餐的规定。改套餐明明一个电话或者App戳戳就能搞定事情，偏偏让你回归属地营业厅跑一趟。虽然最后手持身份证拍照异地受理了但体验实在是不好。</p><p>鱼卡UC浏览器免流大体实现是这样的</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p><img src="/media/15124626122024.jpg" alt="Wireshark抓包"><br>注意这段 <code>Proxy-Authorization: 1|15120022766*******|com.ucweb.iphone.lowversion|ca5fe4b11712e10ba745c2817*******</code><br>关于 Proxy-Authorization 见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Proxy-Authorization" target="_blank" rel="noopener">https://developer.mozilla.org</a><br>即UC浏览器的请求都经过代理服务器。<br>对比几次请求可以发现 1|UID|UA|Key 这几段猜测规律</p><ul><li>1 不变</li><li>UID 标示用户ID</li><li>UA 浏览器UA</li><li>Key 由网站Host计算，应该是md5</li></ul><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>反编译 Android 客户端，基本验证各字段的意义<br><img src="/media/15124639215258.jpg" alt="UC浏览器拼接Proxy-Authorization"></p><p>而 bcX 和 bcW 的获取过程断点获得调用栈如下<br><img src="/media/15124643039841.jpg" alt=""><br>在浏览器激活免流的时候会获取相关字段(不清楚是否会定时更新)<br>请求 <a href="https://freeflow.uc.cn/freeflow/generatePhoneToken" target="_blank" rel="noopener">https://freeflow.uc.cn/freeflow/generatePhoneToken</a> 获取一段密文，解密之后解析赋值给 bcX bcW<br>当开始网络请求时由对应 UID|Key|Host 计算 md5</p><p><img src="/media/15124650691656.jpg" alt="获取Host"></p><p><img src="/media/15124650285893.jpg" alt="计算MD5"></p><p><img src="/media/15124651112067.jpg" alt="拼接Proxy-Authorization"></p><p>密文解密之后的结构体<br><img src="/media/15124652644534.jpg" alt=""></p><p>上面需要的 UID UA KEY Server Port都在里面</p><h3 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h3><p>SSL Pinning 还是必须的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上个月和电信客服扯皮两周多终于把手机套餐改成了阿里鱼卡套餐。&lt;br&gt;从 59RMB (500MB+100分钟通话) 的&lt;del&gt;高端&lt;/del&gt;套餐改成了 19RMB(1GB+100分钟+日租+阿里文娱应用免流) &lt;del&gt;低端&lt;/del&gt;套餐。&lt;br&gt;实在要吐槽一下电信改
      
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Method Trace 生成与解析</title>
    <link href="http://blog.xiazhiri.com/android-method-trace-create-and-parse.html"/>
    <id>http://blog.xiazhiri.com/android-method-trace-create-and-parse.html</id>
    <published>2017-10-11T08:33:13.000Z</published>
    <updated>2017-10-12T03:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio 3.0 中的 Profiler 工具相比 2.0 版本有了很大的进步，这几天翻了下相关的源码记录如下.</p><h3 id="生成-trace-文件"><a href="#生成-trace-文件" class="headerlink" title="生成 trace 文件"></a>生成 trace 文件</h3><p><a href="https://developer.android.com/studio/profile/traceview.html#creatingtracefiles" target="_blank" rel="noopener">官方的文档里</a>对于生成 trace 文件主要有两种</p><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><p><strong>第一种</strong>是在代码中添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// start tracing to "/sdcard/calc.trace"</span></div><div class="line">Debug.startMethodTracing(<span class="string">"calc"</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// stop tracing</span></div><div class="line">Debug.stopMethodTracing();</div></pre></td></tr></table></figure></p><p>生成的trace文件</p><h4 id="ddmlib"><a href="#ddmlib" class="headerlink" title="ddmlib"></a>ddmlib</h4><p><strong>第二种</strong>是使用 ddms / Android Monitor 手动生成, ddms 的核心是一个叫 ddmlib 的库, 在 Android SDK 里 tools/lib/ddmlib-*.jar 可以找到.<br>网上关于 ddmlib 的文章不多, 可以参考一下. <a href="http://blog.csdn.net/eclipsexys/article/details/51316423" target="_blank" rel="noopener">隐藏Boss——ddmlib使用入门</a> 和 <a href="https://testerhome.com/topics/2422" target="_blank" rel="noopener">通过 ddmlib 使用 adb，构建框架基础库</a></p><h4 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h4><p>翻着源码掉了 N 次坑写了一个命令行调用的 jar <a href="https://github.com/likaci/AndroidMethodTraceRunner" target="_blank" rel="noopener">AndroidMethodTraceRunner</a><br>命令行中调用 <code>$ java -jar mtr.jar -p com.your.package -o output.trace -t 10</code> 可以 trace 10 秒钟, 运行需要 java8.<br>主要的两个坑:<br>AndroidDebugBridge.init(true); false 的话不能获取到 client<br>必须关闭 ddms 和 Studio 的 monitor / profiler, 否则会抢占 client 造成连接失败.</p><p>对于 ddmlib 有几个大体的概念<br>bridge - adb<br>device - 设备<br>client - 应用</p><p>主要代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bridge</span></div><div class="line"><span class="comment">//**注意**, 生成 trace 需要连接 client, init(false) 会断开 client</span></div><div class="line">AndroidDebugBridge.init(<span class="keyword">true</span>);</div><div class="line">AndroidDebugBridge bridge = AndroidDebugBridge.createBridge();</div><div class="line"></div><div class="line"><span class="comment">//device</span></div><div class="line">IDevice[] devices = bridge.getDevices();</div><div class="line">IDevice device = devices[<span class="number">0</span>];</div><div class="line"></div><div class="line"><span class="comment">//client</span></div><div class="line">Client client = device.getClient(packageName);</div><div class="line"></div><div class="line"><span class="comment">//start stop</span></div><div class="line">client.startSamplingProfiler(<span class="number">10</span>, TimeUnit.MILLISECONDS);</div><div class="line">client.stopSamplingProfiler();</div></pre></td></tr></table></figure></p><h4 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h4><p><strong>但是</strong> Android Studio 3.0 中并没有使用 ddmlib<br>大体调用栈如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">./idea/profilers-ui/src/com/android/tools/profilers/cpu/CpuProfilerStageView.java:      myStage.startCapturing();</div><div class="line"></div><div class="line">startCapturing</div><div class="line">./tools/adt/idea/profilers/src/com/android/tools/profilers/cpu/CpuProfilerStage.java</div><div class="line">com.android.tools.profilers.cpu.CpuProfilerStage#startCapturing</div><div class="line"></div><div class="line">./tools/base/profiler/native/perfd/cpu/cpu_service.cc</div><div class="line">grpc::Status CpuServiceImpl::StartProfilingApp</div><div class="line"></div><div class="line">./tools/base/profiler/native/perfd/cpu/simpleperf_manager.cc</div><div class="line">bool SimplePerfManager::StartProfiling</div></pre></td></tr></table></figure></p><h3 id="解析-读取-trace"><a href="#解析-读取-trace" class="headerlink" title="解析/读取 trace"></a>解析/读取 trace</h3><h4 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h4><p>ddms 或者 Android Studio 2.0 / Intellij IDEA 可以直接打开 trace 文件, 但是都没有 Android Studio 3.0 的 profiler 直观好用.</p><p><img src="/media/android-studio-3.0-profiler.png" alt="android-studio-3.0-profile">)</p><p><img src="/media/android-studio-traceview.png" alt="android-studio-traceview"></p><p><img src="/media/monitor.png" alt="monitor"></p><h4 id="dmtracedump"><a href="#dmtracedump" class="headerlink" title="dmtracedump"></a>dmtracedump</h4><p>todo</p><h4 id="命令行工具-1"><a href="#命令行工具-1" class="headerlink" title="命令行工具"></a>命令行工具</h4><p>todo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android Studio 3.0 中的 Profiler 工具相比 2.0 版本有了很大的进步，这几天翻了下相关的源码记录如下.&lt;/p&gt;
&lt;h3 id=&quot;生成-trace-文件&quot;&gt;&lt;a href=&quot;#生成-trace-文件&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
      <category term="ddmlib" scheme="http://blog.xiazhiri.com/tags/ddmlib/"/>
    
  </entry>
  
  <entry>
    <title>使用 WireShark 和 strace 定位 Android ARP 风暴</title>
    <link href="http://blog.xiazhiri.com/detect-android-arp-storm-with-wireshark-and-strace.html"/>
    <id>http://blog.xiazhiri.com/detect-android-arp-storm-with-wireshark-and-strace.html</id>
    <published>2017-09-30T05:45:52.000Z</published>
    <updated>2018-02-28T03:30:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天有用户反馈 Android TV 大量发送 ARP 包的问题. 用户应该也是同行, 用 Wireshark 抓包发现电视 1 分钟发 1000 个 arp 包, 但是没法定位到具体的应用。<br>最后使用 <code>strace -f -p PID | grep sendto</code> 和 wireshark 定位到进程<br><img src="/media/android-arp-wireshark.png" alt="Android Arp Storm Strace"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天有用户反馈 Android TV 大量发送 ARP 包的问题. 用户应该也是同行, 用 Wireshark 抓包发现电视 1 分钟发 1000 个 arp 包, 但是没法定位到具体的应用。&lt;br&gt;最后使用 &lt;code&gt;strace -f -p PID | grep s
      
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Lint Aosp App With SonarQube</title>
    <link href="http://blog.xiazhiri.com/Android-Lint-Aosp-with-SonarQube.html"/>
    <id>http://blog.xiazhiri.com/Android-Lint-Aosp-with-SonarQube.html</id>
    <published>2017-06-06T08:08:42.000Z</published>
    <updated>2017-06-19T10:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>第三方 App 在 Android Studio 中可以直接使用 Lint 展示结果.<br>源码编译时在 make 之后工程根目录执行 lint packages/apps/Calendar/ 也可以 Lint.<br>但在实际使用中 <code>lint vendor/letv/apps/Camera/</code> 时提示 <code>No bytecode found: Has the project been built? (Camera)</code>, 同时还有资源使用的误报。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>分析 lint 源码可知<br><a href="https://android.googlesource.com/platform/sdk/+/0bf1b2c/lint/libs/lint_api/src/com/android/tools/lint/detector/api/Project.java#654" target="_blank" rel="noopener">lint/detector/api/Project.java#654</a><br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> List&lt;File&gt; <span class="title">getAospJavaClassPath</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;File&gt; classDirs = <span class="keyword">new</span> ArrayList&lt;File&gt;(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (File dir : getIntermediateDirs()) &#123;</div><div class="line">        File classes = <span class="keyword">new</span> File(dir, <span class="string">"classes"</span>); <span class="comment">//$NON-NLS-1$</span></div><div class="line">        <span class="keyword">if</span> (classes.exists()) &#123;</div><div class="line">            classDirs.add(classes);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            classes = <span class="keyword">new</span> File(dir, <span class="string">"classes.jar"</span>); <span class="comment">//$NON-NLS-1$</span></div><div class="line">            <span class="keyword">if</span> (classes.exists()) &#123;</div><div class="line">                classDirs.add(classes);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (classDirs.size() == <span class="number">0</span>) &#123;</div><div class="line">        mClient.log(<span class="keyword">null</span>,</div><div class="line">                <span class="string">"No bytecode found: Has the project been built? (%1$s)"</span>, getName());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> classDirs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Find the _intermediates directories for a given module name */</span></div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;File&gt; <span class="title">getIntermediateDirs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// See build/core/definitions.mk and in particular the "intermediates-dir-for" definition</span></div><div class="line">    List&lt;File&gt; intermediates = <span class="keyword">new</span> ArrayList&lt;File&gt;();</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Look up the module name, e.g. LOCAL_MODULE. However,</span></div><div class="line">    <span class="comment">// some Android.mk files do some complicated things with it - and most</span></div><div class="line">    <span class="comment">// projects use the same module name as the directory name.</span></div><div class="line">    String moduleName = mDir.getName();</div><div class="line">    String top = getAospTop();</div><div class="line">    <span class="keyword">final</span> String[] outFolders = <span class="keyword">new</span> String[] &#123;</div><div class="line">        top + <span class="string">"/out/host/common/obj"</span>,             <span class="comment">//$NON-NLS-1$</span></div><div class="line">        top + <span class="string">"/out/target/common/obj"</span>,           <span class="comment">//$NON-NLS-1$</span></div><div class="line">        getAospHostOut() + <span class="string">"/obj"</span>,                <span class="comment">//$NON-NLS-1$</span></div><div class="line">        getAospProductOut() + <span class="string">"/obj"</span>              <span class="comment">//$NON-NLS-1$</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">final</span> String[] moduleClasses = <span class="keyword">new</span> String[] &#123;</div><div class="line">            <span class="string">"APPS"</span>,                <span class="comment">//$NON-NLS-1$</span></div><div class="line">            <span class="string">"JAVA_LIBRARIES"</span>,      <span class="comment">//$NON-NLS-1$</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">for</span> (String out : outFolders) &#123;</div><div class="line">        <span class="function"><span class="keyword">assert</span> new <span class="title">File</span><span class="params">(out.replace(<span class="string">'/'</span>, File.separatorChar)</span>).<span class="title">exists</span><span class="params">()</span> : out</span>;</div><div class="line">        <span class="keyword">for</span> (String moduleClass : moduleClasses) &#123;</div><div class="line">            String path = out + <span class="string">'/'</span> + moduleClass + <span class="string">'/'</span> + moduleName</div><div class="line">                    + <span class="string">"_intermediates"</span>; <span class="comment">//$NON-NLS-1$</span></div><div class="line">            File file = <span class="keyword">new</span> File(path.replace(<span class="string">'/'</span>, File.separatorChar));</div><div class="line">            <span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">                intermediates.add(file);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> intermediates;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Lint 会尝试从 out 目录中寻找 <code>ModuleName_intermediates/classes.jar</code>, 找不到则会报 No bytecode found.<br>比如 <code>/letv/workspace/DEMETER_FINAL/out/target/common/obj/APPS/StvCamera_intermediates</code><br>而找不到有两个原因:</p><ol><li>从 Android M 开始 AOSP 使用 Jack 编译 (Android N 开始使用 JaCoCo?), Jack 编译时生成 classes.jack / classes.dex 而非 classes.jar</li><li>getIntermediateDirs() 方法中 moduleName = mDir.getName() 而不是 vendor/letv/app/**/Android.mk 中指定的 LOCAL_PACKAGE_NAME</li></ol><h3 id="禁用-Jack-dex2jar"><a href="#禁用-Jack-dex2jar" class="headerlink" title="禁用 Jack / dex2jar"></a>禁用 Jack / dex2jar</h3><p>对于问题 1 要么禁用掉 Jack make 时生成 classed.jar, 要么把 classes.dex 转换成 classes.jar<br>禁用掉整个项目的 Jack 则会 make 不过, 尝试了几个 module 级别的禁用都无效<br>测试 dex2jar 可行</p><h3 id="修改-lint-api-jar"><a href="#修改-lint-api-jar" class="headerlink" title="修改 lint-api.jar"></a>修改 lint-api.jar</h3><p>对于问题 2 修改 lint-api.jar 比编译整个 lint 工具更简单, 方法与 2. CrossWalk.jar 修改 类似<br>修改过程见 <a href="https://github.com/likaci/android-lint-mod-jar/commits/master" target="_blank" rel="noopener">https://github.com/likaci/android-lint-mod-jar/commits/master</a><br>另外源码环境中的 lint 使用的是 <code>DEMETER_FINAL/prebuilts/devtools/tools/lint</code> 版本太旧, 直接使用最新的 lint-api 修改, 但最新的 lint 需要 jre8 才能执行</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以 DEMETER_FINAL/vendor/letv/apps/Camera/ 为例<br>下载 <a href="https://github.com/likaci/android-lint-mod" target="_blank" rel="noopener">https://github.com/likaci/android-lint-mod</a><br>修改 <code>bin/lint</code> 92行 <code>JAVACMD=&quot;/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java&quot;</code> 成合适的 jre8 路径<br>make 整个 AOSP 工程<br>下载 dex2jar - <a href="https://github.com/pxb1988/dex2jar/releases" target="_blank" rel="noopener">https://github.com/pxb1988/dex2jar/releases</a> 解压到合适的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dex2jar</span></div><div class="line"><span class="built_in">cd</span> DEMETER_FINAL/out/target/common/obj/APPS/StvCamera_intermediates</div><div class="line">dex2jar-2.0/d2j-dex2jar.sh classes.dex -o classes.jar</div><div class="line">  </div><div class="line"><span class="comment"># lint</span></div><div class="line"><span class="built_in">cd</span> DEMETER_FINAL/vendor/letv/apps/Camera/</div><div class="line">pathToModedLint/bin/lint . --xml lint-report.xml</div></pre></td></tr></table></figure></p><p>之后运行 SonarScanner 指定 -Dsonar.android.lint.report=./lint-report.xml 即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SonarQubeScanner/bin/sonar-scanner \</div><div class="line">    -Dsonar.host.url=http://localhost:9000 \</div><div class="line">    -Dsonar.projectName=`basename <span class="variable">$PWD</span>` \</div><div class="line">    -Dsonar.projectVersion=1.0 \</div><div class="line">    -Dsonar.projectKey=`basename <span class="variable">$PWD</span>` \</div><div class="line">    -Dsonar.projectBaseDir=`<span class="variable">$PWD</span>` \</div><div class="line">    -Dsonar.sources=<span class="string">"./src,./res,./AndroidManifest.xml"</span> \</div><div class="line">    -Dsonar.profile=<span class="string">"Android Lint"</span> \</div><div class="line">    -Dsonar.import_unknown_files=<span class="literal">true</span> \</div><div class="line">    -Dsonar.android.lint.report=./lint-report.xml</div><div class="line"><span class="comment">#最后四行是关键</span></div></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>使用 Lint 改进您的代码 - <a href="https://developer.android.com/studio/write/lint.html?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/studio/write/lint.html?hl=zh-cn</a><br>Compiling with Jack - <a href="https://source.android.com/source/jackey" target="_blank" rel="noopener">https://source.android.com/source/jackey</a><br><a href="http://macoscope.com/blog/using-sonarqube-with-jenkins-continuous-integration-and-github-to-improve-code-review/" target="_blank" rel="noopener">Using SonarQube with Jenkins Continuous Integration and GitHub to Improve Code Review</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;第三方 App 在 Android Studio 中可以直接使用 Lint 展示结果.&lt;br&gt;源码编译时在 make 之后工程根目录执行 lint packages/apps/Calendar/ 也可以 Lint.&lt;br&gt;但在实际使用中 &lt;code&gt;lint vendor/letv/apps/Camera/&lt;/code&gt; 时提示 &lt;code&gt;No bytecode found: Has the project been built? (Camera)&lt;/code&gt;, 同时还有资源使用的误报。&lt;/p&gt;
&lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;分析 lint 源码可知&lt;br&gt;&lt;a href=&quot;https://android.googlesource.com/platform/sdk/+/0bf1b2c/lint/libs/lint_api/src/com/android/tools/lint/detector/api/Project.java#654&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lint/detector/api/Project.java#654&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
      <category term="Lint" scheme="http://blog.xiazhiri.com/tags/Lint/"/>
    
      <category term="AOSP" scheme="http://blog.xiazhiri.com/tags/AOSP/"/>
    
      <category term="SonarQube" scheme="http://blog.xiazhiri.com/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Dell TB15 拓展坞 Diy 风扇散热(多图)</title>
    <link href="http://blog.xiazhiri.com/dell-tb15-diy-cooler.html"/>
    <id>http://blog.xiazhiri.com/dell-tb15-diy-cooler.html</id>
    <published>2017-01-16T09:04:25.000Z</published>
    <updated>2017-05-13T04:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dell TB15 拓展坞用了一周多, 先简单说下自己发现的优缺点:</p><p>缺点:</p><ol><li><a href="https://github.com/KhaosT/tb3-enabler" target="_blank" rel="noopener">必须破解才能使用</a></li><li>散热有问题, 似乎是官方召回的产品, 持续使用时外壳40℃+ 稳定性不明</li><li>有时 USB、Lan口 会没反应, 需要重启Dock</li></ol><p>优点:</p><ol><li>可以给 15’ mbp 充电, 58W. 之前用绿*的 HUB 和官方充电器只能到 52W, 时不时会提示不在充电.</li><li>DP/mini-DP 支持 4K 60Hz</li><li>千兆 Lan</li><li>便宜. *宝上洋垃圾 + 180w 电源适配器 500+大洋</li></ol><p>下面开始 DIY<br><img src="http://ww1.sinaimg.cn/large/006tNbRwly1fbslnrmgr7j31kw16ohdt.jpg" alt=""><br>▲带电测试几分钟, 红框内的芯片触摸温度50℃+</p><a id="more"></a><p><img src="http://ww2.sinaimg.cn/large/006tNbRwly1fbsm35wonnj31kw23vu0x.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fbsmynbgogj30dw0690ut.jpg" alt=""><br>▲温度开关(40℃常开) + 5v笔记本风扇 + DC降压模块 + 散热片</p><p><img src="http://ww2.sinaimg.cn/large/006tNbRwly1fbslwhah2aj31kw23vhdt.jpg" alt=""><br>▲背部USB2.0端口取电, 记得热熔胶固定</p><p>外壳两侧开进风出风口, 开始尝试用手拧钻孔, 但钻了两个之后直接放弃了——手酸.<br>最后直接拿电烙铁开口, 锉刀磨平. 过程中没有拍照.</p><p><img src="http://ww4.sinaimg.cn/large/006tNbRwly1fbsn5dl9z8j31kw16o4qp.jpg" alt=""><br>▲风扇和降压模块用热熔胶固定</p><p><img src="http://ww3.sinaimg.cn/large/006tNbRwly1fbsmczid9lj31kw16ou0x.jpg" alt=""><br>▲连接起来</p><p><img src="http://ww1.sinaimg.cn/large/006tNbRwly1fbsmi11ti0j31kw1nyb29.jpg" alt=""><br>▲内部空间很富余</p><p><img src="http://ww4.sinaimg.cn/large/006tNbRwly1fbsmkna93kj31kw16oe81.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/006tNbRwly1fbsmqb799hj31kw16ohdt.jpg" alt=""><br>▲开口</p><p>结论/心得/成果:</p><ol><li>难度不大, 内部空间很富余</li><li>风扇有噪音, 不过办公室内可以忽略</li><li>外壳不热了, 对稳定性影响未知</li><li>风扇有最低启动电压，不能无极调速</li><li>热熔胶要慎用</li><li>开心就好</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dell TB15 拓展坞用了一周多, 先简单说下自己发现的优缺点:&lt;/p&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KhaosT/tb3-enabler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;必须破解才能使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;散热有问题, 似乎是官方召回的产品, 持续使用时外壳40℃+ 稳定性不明&lt;/li&gt;
&lt;li&gt;有时 USB、Lan口 会没反应, 需要重启Dock&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以给 15’ mbp 充电, 58W. 之前用绿*的 HUB 和官方充电器只能到 52W, 时不时会提示不在充电.&lt;/li&gt;
&lt;li&gt;DP/mini-DP 支持 4K 60Hz&lt;/li&gt;
&lt;li&gt;千兆 Lan&lt;/li&gt;
&lt;li&gt;便宜. *宝上洋垃圾 + 180w 电源适配器 500+大洋&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面开始 DIY&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNbRwly1fbslnrmgr7j31kw16ohdt.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;▲带电测试几分钟, 红框内的芯片触摸温度50℃+&lt;/p&gt;
    
    </summary>
    
    
      <category term="Thunderbolt3" scheme="http://blog.xiazhiri.com/tags/Thunderbolt3/"/>
    
      <category term="Dock" scheme="http://blog.xiazhiri.com/tags/Dock/"/>
    
  </entry>
  
  <entry>
    <title>CrossWalk Chromium Jar 修改指南</title>
    <link href="http://blog.xiazhiri.com/crosswalk-chromium-mod-jar.html"/>
    <id>http://blog.xiazhiri.com/crosswalk-chromium-mod-jar.html</id>
    <published>2017-01-14T01:42:26.000Z</published>
    <updated>2017-05-13T04:33:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>CrossWalk 是由 Intel 主导, 基于 Chromium 的 WebView 实现. 旨在为不同平台提供高效并且一致的 Web 体验.<br>关于<a href="https://crosswalk-project.org/documentation/about/faq_zh.html" target="_blank" rel="noopener">项目简介</a>、优劣对比、<a href="https://crosswalk-project.org/documentation/getting_started_zh.html" target="_blank" rel="noopener">控件的使用</a>, 建议参考官方文档.<br>本文主要从Java层 以修改最新 <code>Stable 22.52.561.4</code> 介绍如何<strong>下载源码</strong>和<strong>修改Jar</strong>   </p><h2 id="1-源码下载"><a href="#1-源码下载" class="headerlink" title="1. 源码下载"></a>1. 源码下载</h2><p>官方提供的<a href="https://crosswalk-project.org/contribute/building_crosswalk/android_build.html" target="_blank" rel="noopener">下载方式</a>与 Chromium 一样，需要使用 <a href="https://www.chromium.org/developers/how-tos/depottools" target="_blank" rel="noopener">gclient</a> 下载. 但是代码仓库较大, 国内网络环境下基本无望.</p><p>另外一个方式可以直接从 GitHub 上下载:<br><a href="https://github.com/crosswalk-project/crosswalk" target="_blank" rel="noopener">https://github.com/crosswalk-project/crosswalk</a><br><a href="https://github.com/crosswalk-project/chromium-crosswalk" target="_blank" rel="noopener">https://github.com/crosswalk-project/chromium-crosswalk</a><br>下载完大概8GB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> crosswalk</div><div class="line">$ git branch -av</div><div class="line">    remotes/origin/crosswalk-21        c8e322d Bump version to 21.51.546.7</div><div class="line">    remotes/origin/crosswalk-22        67b33ab Bump version to 22.52.561.4</div><div class="line">    remotes/origin/crosswalk-23        8ba6a38 Bump version to 23.53.589.4</div><div class="line"><span class="comment"># Crosswalk-22 正好是需要的版本</span></div><div class="line">$ git checkout crosswalk-22</div><div class="line"></div><div class="line"><span class="comment">#在 DEPS.xwalk 中可以找到对应 Chromium_Crosswalk 仓库对应 Commit</span></div><div class="line"><span class="comment"># chromium_crosswalk_rev = 'cbf42ea903acd7510548806a99efd200da37d492'</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> chromium-crosswalk</div><div class="line">$ git branch -av</div><div class="line">remotes/origin/crosswalk-22/52.0.2743.116cbf42ea Merge pull request ...</div><div class="line"><span class="comment"># 找到对应的 Commit </span></div><div class="line">$ git checkout crosswalk-22/52.0.2743.116</div></pre></td></tr></table></figure><a id="more"></a><h2 id="2-Java-Jar-修改"><a href="#2-Java-Jar-修改" class="headerlink" title="2. Java/Jar 修改"></a>2. Java/Jar 修改</h2><p>官方建议的<a href="https://crosswalk-project.org/contribute/building_crosswalk/android_build.html" target="_blank" rel="noopener">构建方式</a>需要 Linux/macOS, 如果只是修改Java层的代码则不需要这么麻烦.</p><ol><li>使用 Intellij IDEA 新建 Java 工程, 将 xwalk_core_library_java.jar 添加进依赖.</li><li>Src 下添加<strong>同包名同类名的类</strong></li><li>Build – Build Artifacts – Build</li></ol><p>具体配置如下:<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tgy1fbsbgow1fcj30p30gkn02.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0060lm7Tgw1fbsbgox0lyj30ph0ixjue.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CrossWalk 是由 Intel 主导, 基于 Chromium 的 WebView 实现. 旨在为不同平台提供高效并且一致的 Web 体验.&lt;br&gt;关于&lt;a href=&quot;https://crosswalk-project.org/documentation/about/faq_zh.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目简介&lt;/a&gt;、优劣对比、&lt;a href=&quot;https://crosswalk-project.org/documentation/getting_started_zh.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;控件的使用&lt;/a&gt;, 建议参考官方文档.&lt;br&gt;本文主要从Java层 以修改最新 &lt;code&gt;Stable 22.52.561.4&lt;/code&gt; 介绍如何&lt;strong&gt;下载源码&lt;/strong&gt;和&lt;strong&gt;修改Jar&lt;/strong&gt;   &lt;/p&gt;
&lt;h2 id=&quot;1-源码下载&quot;&gt;&lt;a href=&quot;#1-源码下载&quot; class=&quot;headerlink&quot; title=&quot;1. 源码下载&quot;&gt;&lt;/a&gt;1. 源码下载&lt;/h2&gt;&lt;p&gt;官方提供的&lt;a href=&quot;https://crosswalk-project.org/contribute/building_crosswalk/android_build.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载方式&lt;/a&gt;与 Chromium 一样，需要使用 &lt;a href=&quot;https://www.chromium.org/developers/how-tos/depottools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gclient&lt;/a&gt; 下载. 但是代码仓库较大, 国内网络环境下基本无望.&lt;/p&gt;
&lt;p&gt;另外一个方式可以直接从 GitHub 上下载:&lt;br&gt;&lt;a href=&quot;https://github.com/crosswalk-project/crosswalk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/crosswalk-project/crosswalk&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/crosswalk-project/chromium-crosswalk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/crosswalk-project/chromium-crosswalk&lt;/a&gt;&lt;br&gt;下载完大概8GB&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; crosswalk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git branch -av&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    remotes/origin/crosswalk-21        c8e322d Bump version to 21.51.546.7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    remotes/origin/crosswalk-22        67b33ab Bump version to 22.52.561.4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    remotes/origin/crosswalk-23        8ba6a38 Bump version to 23.53.589.4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Crosswalk-22 正好是需要的版本&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git checkout crosswalk-22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在 DEPS.xwalk 中可以找到对应 Chromium_Crosswalk 仓库对应 Commit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chromium_crosswalk_rev = &#39;cbf42ea903acd7510548806a99efd200da37d492&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; chromium-crosswalk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git branch -av&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remotes/origin/crosswalk-22/52.0.2743.116		cbf42ea Merge pull request ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 找到对应的 Commit &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git checkout crosswalk-22/52.0.2743.116&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CrossWalk" scheme="http://blog.xiazhiri.com/tags/CrossWalk/"/>
    
      <category term="Chromium" scheme="http://blog.xiazhiri.com/tags/Chromium/"/>
    
      <category term="WebView" scheme="http://blog.xiazhiri.com/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>不要使用 cnpm 安装 F8App, react-native.js:120 ...require(&#39;React&#39;), SyntaxError: Unexpected token ...</title>
    <link href="http://blog.xiazhiri.com/do-not-use-cnpm-install-f8app.html"/>
    <id>http://blog.xiazhiri.com/do-not-use-cnpm-install-f8app.html</id>
    <published>2016-04-23T01:36:22.000Z</published>
    <updated>2016-04-24T01:53:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>不要使用 <code>cnpm install</code> 安装，不然运行时会报错。<br>开始被<a href="https://www.bountysource.com/issues/25671889-make-relay-work-with-react-native-out-of-the-box" target="_blank" rel="noopener">这个帖子</a>误导浪费半天时间……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ react-native run-android</div><div class="line">/f8app/node_modules/.npminstall/react-native/0.23.1/react-native/Libraries/react-native/react-native.js:120</div><div class="line">  ...require(<span class="string">'React'</span>),</div><div class="line">  ^^^</div><div class="line"></div><div class="line">SyntaxError: Unexpected token ...</div><div class="line">    at exports.runInThisContext (vm.js:53:16)</div><div class="line">    at Module._compile (module.js:414:25)</div><div class="line">    at Module._extensions..js (module.js:442:10)</div><div class="line">    at Object.require.extensions.(anonymous <span class="keyword">function</span>) [as .js] (/f8app/node_modules/.npminstall/babel-register/6.7.2/babel-register/lib/node.js:134:7)</div><div class="line">    at Module.load (module.js:356:32)</div><div class="line">    at Function.Module._load (module.js:311:12)</div><div class="line">    at Module.require (module.js:366:17)</div><div class="line">    at require (module.js:385:17)</div><div class="line">    at /f8app/node_modules/.npminstall/babel-core/6.7.7/babel-core/lib/transformation/file/options/option-manager.js:368:22</div><div class="line">    at Array.map (native)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不要使用 &lt;code&gt;cnpm install&lt;/code&gt; 安装，不然运行时会报错。&lt;br&gt;开始被&lt;a href=&quot;https://www.bountysource.com/issues/25671889-make-relay-work-with-react-native
      
    
    </summary>
    
    
      <category term="react" scheme="http://blog.xiazhiri.com/tags/react/"/>
    
      <category term="npm" scheme="http://blog.xiazhiri.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Android 播放加密视频的一个思路</title>
    <link href="http://blog.xiazhiri.com/Android-Play-Encrypted-Video.html"/>
    <id>http://blog.xiazhiri.com/Android-Play-Encrypted-Video.html</id>
    <published>2016-03-20T09:32:57.000Z</published>
    <updated>2017-05-13T04:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>Android 播放加密视频的基本思路就是：<strong>本地启动一个HTTP服务作为代理，解密之后给播放器播放</strong>。<br>这样的好处就是可以<strong>自定义加密方案</strong>，更重要的是 加密/解密模块 可以和视频播放模块<strong>解耦</strong>。   </p><h3 id="处理HTTP头"><a href="#处理HTTP头" class="headerlink" title="处理HTTP头"></a>处理HTTP头</h3><p>这里使用的 <a href="http://nanohttpd.org/" target="_blank" rel="noopener">NanoHTTPD</a> , 一个纯Java实现的微型WEB服务器，代码开源。<br>代码实现起来很简单，只要继承然后重写两个方法就可以。<br>稍微复杂的是怎样处理从视频播放器过来的请求。   </p><p>通过 <a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a> 代理就能发现简单的规律。<br>VideoView播放在线视频的时候，发出的GET请求。第一次是一个普通的请求，务器返回200；之后的则全是分段请求，服务器返回206。   </p><p>第一次请求 和 结果<br><img src="http://ww1.sinaimg.cn/large/c0f281e2jw1f25u97tgzej215m04idgr.jpg" alt="">   </p><p><img src="http://ww2.sinaimg.cn/large/c0f281e2jw1f25ub757lbj211g09qq4v.jpg" alt=""></p><hr><p>第二次请求 和 结果<br><img src="http://ww4.sinaimg.cn/large/c0f281e2jw1f25uch2s9fj215c05at9x.jpg" alt="">   </p><p><img src="http://ww3.sinaimg.cn/large/c0f281e2jw1f25udpfdj7j212409ytb1.jpg" alt="">   </p><p>两次Request的区别是 后面的有Range字段<br>两次Response的区别是:   </p><ol><li>第一次 返回HTTP200 第二次 返回HTTP206</li><li>第一次 Content-Length是文件的整体大小; 第二次Content-Lenght是剩余的大小</li><li>第二次 返回Content-Range</li></ol><p>有了区别之后就简单了，剩下要做的就是: <strong>根据Req的不同，返回不同的 HTTP头 和数据</strong>。</p><a id="more"></a><h3 id="继承InputStream"><a href="#继承InputStream" class="headerlink" title="继承InputStream"></a>继承InputStream</h3><p>Demo中用到的”加密”很简单: 直接在文件头部加入一些16进制的文字，一般的视频播放就没法识别了。<br>当然还可以有其他拓展的加密方法，比如数据乱序存储(在文件头部存储读取索引)、数据按块大小进行加密等   </p><p>Demo中直接继承InputStream, 然后重写几个必要的方法，通过InputStream.Skip()方法跳过无用的文件头即可。   </p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>源码见：<a href="https://github.com/likaci/Android-Play-Encrypted-Video" target="_blank" rel="noopener">Github Repo</a>   </p><p><img src="http://ww1.sinaimg.cn/large/c0f281e2jw1f25xd7oh45j21401z4jz5.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h3&gt;&lt;p&gt;Android 播放加密视频的基本思路就是：&lt;strong&gt;本地启动一个HTTP服务作为代理，解密之后给播放器播放&lt;/strong&gt;。&lt;br&gt;这样的好处就是可以&lt;strong&gt;自定义加密方案&lt;/strong&gt;，更重要的是 加密/解密模块 可以和视频播放模块&lt;strong&gt;解耦&lt;/strong&gt;。   &lt;/p&gt;
&lt;h3 id=&quot;处理HTTP头&quot;&gt;&lt;a href=&quot;#处理HTTP头&quot; class=&quot;headerlink&quot; title=&quot;处理HTTP头&quot;&gt;&lt;/a&gt;处理HTTP头&lt;/h3&gt;&lt;p&gt;这里使用的 &lt;a href=&quot;http://nanohttpd.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NanoHTTPD&lt;/a&gt; , 一个纯Java实现的微型WEB服务器，代码开源。&lt;br&gt;代码实现起来很简单，只要继承然后重写两个方法就可以。&lt;br&gt;稍微复杂的是怎样处理从视频播放器过来的请求。   &lt;/p&gt;
&lt;p&gt;通过 &lt;a href=&quot;https://www.charlesproxy.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Charles&lt;/a&gt; 代理就能发现简单的规律。&lt;br&gt;VideoView播放在线视频的时候，发出的GET请求。第一次是一个普通的请求，务器返回200；之后的则全是分段请求，服务器返回206。   &lt;/p&gt;
&lt;p&gt;第一次请求 和 结果&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/c0f281e2jw1f25u97tgzej215m04idgr.jpg&quot; alt=&quot;&quot;&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/c0f281e2jw1f25ub757lbj211g09qq4v.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第二次请求 和 结果&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/c0f281e2jw1f25uch2s9fj215c05at9x.jpg&quot; alt=&quot;&quot;&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/c0f281e2jw1f25udpfdj7j212409ytb1.jpg&quot; alt=&quot;&quot;&gt;   &lt;/p&gt;
&lt;p&gt;两次Request的区别是 后面的有Range字段&lt;br&gt;两次Response的区别是:   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次 返回HTTP200 第二次 返回HTTP206&lt;/li&gt;
&lt;li&gt;第一次 Content-Length是文件的整体大小; 第二次Content-Lenght是剩余的大小&lt;/li&gt;
&lt;li&gt;第二次 返回Content-Range&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了区别之后就简单了，剩下要做的就是: &lt;strong&gt;根据Req的不同，返回不同的 HTTP头 和数据&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA / WebStorm Create Non-Web Node Project</title>
    <link href="http://blog.xiazhiri.com/intellij-webstorm-create-non-web-node-project.html"/>
    <id>http://blog.xiazhiri.com/intellij-webstorm-create-non-web-node-project.html</id>
    <published>2016-01-28T02:06:30.000Z</published>
    <updated>2016-01-28T02:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Create project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir nodetest &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></div><div class="line">$ npm init</div></pre></td></tr></table></figure></li><li><p>Open project in intellij / WebStorm , Enable Code Assistance<br><img src="http://ww4.sinaimg.cn/large/c0f281e2jw1f0f0j3cmk2j217k0w0dmo.jpg" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create project&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
      <category term="Intellij" scheme="http://blog.xiazhiri.com/tags/Intellij/"/>
    
      <category term="npm" scheme="http://blog.xiazhiri.com/tags/npm/"/>
    
      <category term="node" scheme="http://blog.xiazhiri.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Delete By Query plugin error</title>
    <link href="http://blog.xiazhiri.com/elasticsearch-delete-by-query-error.html"/>
    <id>http://blog.xiazhiri.com/elasticsearch-delete-by-query-error.html</id>
    <published>2016-01-18T01:53:52.000Z</published>
    <updated>2016-01-18T02:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DELETE _all/_query</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>No handler found for uri [/logstash-2016.01.13/logs] and method [DELETE]</strong></p><p>Solution: restart elasticsearch after install the delete-by-query plugin…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
      
    
    </summary>
    
    
      <category term="elk" scheme="http://blog.xiazhiri.com/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Jitouch 和 Intellij IDEA 15 冲突导致 IDEA 右键菜单不能显示。</title>
    <link href="http://blog.xiazhiri.com/Intellij-IDEA-15-right-menu-can-not-show-cause-Jitouch.html"/>
    <id>http://blog.xiazhiri.com/Intellij-IDEA-15-right-menu-can-not-show-cause-Jitouch.html</id>
    <published>2015-11-04T09:00:00.000Z</published>
    <updated>2015-11-05T02:47:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jitouch 和 Intellij IDEA 15 冲突导致 IDEA 右键菜单不能显示。<br>目前只能禁用掉 Jitouch<br>或者 <a href="http://blog.jetbrains.com/idea/2015/05/intellij-idea-14-1-4-eap-141-1192-is-available/" target="_blank" rel="noopener">切换 IDE JDK 版本</a> 或者 Ctrl+左键</p><hr><p>IntelliJ IDEA 15 context menu can’t show cause conflicts with Jitouch.<br>You can disable Jitouch<br>or <a href="http://blog.jetbrains.com/idea/2015/05/intellij-idea-14-1-4-eap-141-1192-is-available/" target="_blank" rel="noopener">Switch JDK version of IDE</a> or just ctrl + click…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jitouch 和 Intellij IDEA 15 冲突导致 IDEA 右键菜单不能显示。&lt;br&gt;目前只能禁用掉 Jitouch&lt;br&gt;或者 &lt;a href=&quot;http://blog.jetbrains.com/idea/2015/05/intellij-idea-14-
      
    
    </summary>
    
    
      <category term="OS X" scheme="http://blog.xiazhiri.com/tags/OS-X/"/>
    
      <category term="Intellij IDEA" scheme="http://blog.xiazhiri.com/tags/Intellij-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 批量计算网络连接速度</title>
    <link href="http://blog.xiazhiri.com/RxJava-calc-connection-cost-batch.html"/>
    <id>http://blog.xiazhiri.com/RxJava-calc-connection-cost-batch.html</id>
    <published>2015-11-03T02:51:21.000Z</published>
    <updated>2017-05-13T04:34:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.计算连接耗时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calcConnCost</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = <span class="keyword">new</span> Date().getTime();</div><div class="line">    <span class="keyword">long</span> end = start;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        HttpURLConnection conn = (HttpURLConnection) <span class="keyword">new</span> URL(url).openConnection();</div><div class="line">        conn.setRequestProperty(<span class="string">"Range"</span>, <span class="string">"bytes=0-0"</span>);</div><div class="line">        conn.setIfModifiedSince(<span class="number">1</span>);</div><div class="line">        start = <span class="keyword">new</span> Date().getTime();</div><div class="line">        <span class="keyword">if</span> (conn.getResponseCode() == <span class="number">206</span> || conn.getResponseCode() == <span class="number">200</span>) &#123;</div><div class="line">            end = <span class="keyword">new</span> Date().getTime();</div><div class="line">        &#125;</div><div class="line">        conn.disconnect();</div><div class="line">        conn = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> end - start;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2.异步计算<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">        Observable.just(<span class="string">"http://baidu.com"</span>)</div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;String, Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> calcConnCost(url);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long cost)</span> </span>&#123;</div><div class="line">                        Log.d(<span class="string">"time"</span>, cost + <span class="string">""</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="comment">//输出 time:90</span></div></pre></td></tr></table></figure></p><a id="more"></a><p>3.请求十次，求平均值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">        MathObservable.averageLong(</div><div class="line">                Observable.just(<span class="string">"baidu.com"</span>)</div><div class="line">                        .repeat(<span class="number">10</span>)</div><div class="line">                        .map(<span class="keyword">new</span> Func1&lt;String, Long&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">                                <span class="keyword">return</span> calcConnCost(url);</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">        )</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long averageCost)</span> </span>&#123;</div><div class="line">                        Log.e(<span class="string">"Average"</span>, averageCost + <span class="string">""</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="comment">//输出Average:90</span></div></pre></td></tr></table></figure></p><p>4.一组Url求平均值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">        List&lt;String&gt; urls = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        MathObservable.averageLong(</div><div class="line">                Observable.from(urls)</div><div class="line">                        .map(<span class="keyword">new</span> Func1&lt;String, Long&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">                                <span class="keyword">return</span> calcConnCost(url);</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">        )</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long averageCost)</span> </span>&#123;</div><div class="line">                        Log.e(<span class="string">"Average"</span>, averageCost + <span class="string">""</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="comment">//输出 Average:90</span></div></pre></td></tr></table></figure></p><p>5.多组Url分别求平均值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">        Map&lt;String, Set&lt;String&gt;&gt; hostUrl = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        Observable.from(hostUrl.entrySet())</div><div class="line">                .flatMap(<span class="keyword">new</span> Func1&lt;Map.Entry&lt;String, Set&lt;String&gt;&gt;, Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Map.Entry&lt;String, Set&lt;String&gt;&gt; stringSetEntry)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> MathObservable.averageLong(</div><div class="line">                                Observable.from(stringSetEntry.getValue())</div><div class="line">                                        .map(<span class="keyword">new</span> Func1&lt;String, Long&gt;() &#123;</div><div class="line">                                            <span class="meta">@Override</span></div><div class="line">                                            <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">                                                <span class="keyword">return</span> calcConnCost(url);</div><div class="line">                                            &#125;</div><div class="line">                                        &#125;)</div><div class="line">                        );</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long averageCost)</span> </span>&#123;</div><div class="line">                        Log.e(<span class="string">"Average"</span>, averageCost + <span class="string">""</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="comment">//输出 Average:70</span></div><div class="line"><span class="comment">//输出 Average:60</span></div><div class="line"><span class="comment">//输出 Average:50</span></div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure></p><p>6.多组Url分别求平均值并保留host</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">        Map&lt;String, Set&lt;String&gt;&gt; hostUrl = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        Observable.from(hostUrl.entrySet())</div><div class="line">                .flatMap(<span class="keyword">new</span> Func1&lt;Map.Entry&lt;String, Set&lt;String&gt;&gt;, Observable&lt;Map.Entry&lt;String, Long&gt;&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> Observable&lt;Map.Entry&lt;String, Long&gt;&gt; call(Map.Entry&lt;String, Set&lt;String&gt;&gt; stringSetEntry) &#123;</div><div class="line">                        <span class="keyword">return</span> Observable.zip(</div><div class="line">                                Observable.just(stringSetEntry.getKey()),</div><div class="line">                                MathObservable.averageLong(</div><div class="line">                                        Observable.from(stringSetEntry.getValue()).map(<span class="keyword">new</span> Func1&lt;String, Long&gt;() &#123;</div><div class="line">                                            <span class="meta">@Override</span></div><div class="line">                                            <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">                                                <span class="keyword">return</span> NetSpeedUtil.calcConnCost(url);</div><div class="line">                                            &#125;</div><div class="line">                                        &#125;)),</div><div class="line">                                <span class="keyword">new</span> Func2&lt;String, Long, Map.Entry&lt;String, Long&gt;&gt;() &#123;</div><div class="line">                                    <span class="meta">@Override</span></div><div class="line">                                    <span class="keyword">public</span> Map.<span class="function">Entry&lt;String, Long&gt; <span class="title">call</span><span class="params">(String host, Long cost)</span> </span>&#123;</div><div class="line">                                        <span class="keyword">return</span> <span class="keyword">new</span> AbstractMap.SimpleEntry&lt;&gt;(host, cost);</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                        );</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Map.Entry&lt;String, Long&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Map.Entry&lt;String, Long&gt; hostCostEntry)</span> </span>&#123;</div><div class="line">                        Log.e(hostCostEntry.getKey(), hostCostEntry.getValue() + <span class="string">""</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="comment">//输出 baidu.com:90</span></div><div class="line"><span class="comment">//输出 yahoo.com:110</span></div><div class="line"><span class="comment">//输出 google.cn:190</span></div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure><p>7.拆分之后可读性更好一些…<br><img src="http://ww3.sinaimg.cn/large/c0f281e2jw1exnlcvg7l3j21f60xitfz.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.计算连接耗时&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calcConnCost&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String url)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date().getTime();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; end = start;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        HttpURLConnection conn = (HttpURLConnection) &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(url).openConnection();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        conn.setRequestProperty(&lt;span class=&quot;string&quot;&gt;&quot;Range&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bytes=0-0&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        conn.setIfModifiedSince(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        start = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date().getTime();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (conn.getResponseCode() == &lt;span class=&quot;number&quot;&gt;206&lt;/span&gt; || conn.getResponseCode() == &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            end = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date().getTime();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        conn.disconnect();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        conn = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; end - start;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.异步计算&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;        Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;http://baidu.com&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;String, Long&amp;gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Long &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String url)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; calcConnCost(url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .subscribeOn(Schedulers.io())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .observeOn(AndroidSchedulers.mainThread())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Long&amp;gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long cost)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        Log.d(&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;, cost + &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出 time:90&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
      <category term="RxJava" scheme="http://blog.xiazhiri.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio Intellij IDEA 在 OSX 10.11 上右键失效</title>
    <link href="http://blog.xiazhiri.com/OSX10-11-EICapitan-IntellijIDEA-AndroidStudio-RightMouseMenuProblem.html"/>
    <id>http://blog.xiazhiri.com/OSX10-11-EICapitan-IntellijIDEA-AndroidStudio-RightMouseMenuProblem.html</id>
    <published>2015-09-17T08:08:50.000Z</published>
    <updated>2015-09-17T08:24:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>从 10.10 升级到 10.11 EI Capitan GM 发现 Intellij IDEA 和 Android Studio 右键点击失效，但 Ctrl+左键 有效。<br> 尝试几次之后发现安装 JavaForOSX 问题解决.<br> <a href="https://support.apple.com/kb/DL1572?locale=en_US" target="_blank" rel="noopener">https://support.apple.com/kb/DL1572?locale=en_US</a></p><hr><p>Android Studio and Intellij IDEA RightClick Menu won’t show in new OSX 10.11 EI Capitan due to system java version.<br>Install<br> <a href="https://support.apple.com/kb/DL1572?locale=en_US" target="_blank" rel="noopener">https://support.apple.com/kb/DL1572?locale=en_US</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 10.10 升级到 10.11 EI Capitan GM 发现 Intellij IDEA 和 Android Studio 右键点击失效，但 Ctrl+左键 有效。&lt;br&gt; 尝试几次之后发现安装 JavaForOSX 问题解决.&lt;br&gt; &lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="OS X" scheme="http://blog.xiazhiri.com/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>ArcMap Python 脚本编写入门索引</title>
    <link href="http://blog.xiazhiri.com/ArcMap-Python-AddIn-Intro.html"/>
    <id>http://blog.xiazhiri.com/ArcMap-Python-AddIn-Intro.html</id>
    <published>2015-03-26T12:21:30.000Z</published>
    <updated>2017-05-14T12:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是Python脚本批量处理ArcMap数据的入门资料索引. </p><p>如果是简单的批量处理数据, 可以直接使用ArcMap内置的Python窗口处理.而对于稍复杂或经常重复的操作就可以考虑用插件来完成.</p><h3 id="ArcMap中的Python窗口："><a href="#ArcMap中的Python窗口：" class="headerlink" title="ArcMap中的Python窗口："></a>ArcMap中的Python窗口：</h3><ul><li><a href="http://resources.arcgis.com/zh-cn/help/main/10.2/index.html#//002100000017000000" target="_blank" rel="noopener">什么是 Python 窗口？</a></li><li><a href="http://resources.arcgis.com/zh-cn/help/main/10.2/index.html#/na/000v000000v7000000/" target="_blank" rel="noopener">什么是 ArcPy？</a></li></ul><h3 id="ArcMap中的Python插件"><a href="#ArcMap中的Python插件" class="headerlink" title="ArcMap中的Python插件"></a>ArcMap中的Python插件</h3><p>ArcMap中的python插件有两种形式, 一种是Toolbox里直接运行的py脚本, 添加时需要设置字段. 比如下图里的 <code>Add Geometry Attributes</code> 就属于此类.<br><img src="http://ww3.sinaimg.cn/large/c0f281e2tw1eqkbgjuoouj20n907i77w.jpg" alt=""><br>另一种是作为<code>esriaddin</code>插件形式的，可以添加菜单、工具条；单文件形式存在，方便安装和传播，不过似乎不方便调试。</p><h3 id="开始吧，皮卡丘"><a href="#开始吧，皮卡丘" class="headerlink" title="开始吧，皮卡丘"></a>开始吧，皮卡丘</h3><ol><li>首先python要有入门水平, 推荐廖雪峰的 <a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/" target="_blank" rel="noopener">Python教程</a>, 看一两遍差不多入门.</li><li><a href="https://www.packtpub.com/application-development/programming-arcgis-101-python-cookbook" target="_blank" rel="noopener">Programming ArcGIS 10.1 with Python Cookbook</a>, 这本书不错, 难度一般,例数据比较全.<br><img src="https://d255esdrn735hr.cloudfront.net/sites/default/files/imagecache/ppv4_main_book_cover/4445OT_0.jpg" alt=""></li><li><a href="http://resources.arcgis.com/zh-cn/help/main/10.2/index.html#/na/014p00000025000000/" target="_blank" rel="noopener">什么是 Python 加载项？</a></li><li><a href="http://gis.stackexchange.com/" target="_blank" rel="noopener">gis.stackexchange.com</a> 基本上ArcPy相关的问题都可以查到.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要是Python脚本批量处理ArcMap数据的入门资料索引. &lt;/p&gt;
&lt;p&gt;如果是简单的批量处理数据, 可以直接使用ArcMap内置的Python窗口处理.而对于稍复杂或经常重复的操作就可以考虑用插件来完成.&lt;/p&gt;
&lt;h3 id=&quot;ArcMap中的Python窗口
      
    
    </summary>
    
    
      <category term="ArcGIS" scheme="http://blog.xiazhiri.com/tags/ArcGIS/"/>
    
      <category term="Python" scheme="http://blog.xiazhiri.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 导入项目依赖(Gradle) 以 ArcGIS Android SDK 为例</title>
    <link href="http://blog.xiazhiri.com/Import-ArcGIS-Android-SDK-to-Intellij-IDEA.html"/>
    <id>http://blog.xiazhiri.com/Import-ArcGIS-Android-SDK-to-Intellij-IDEA.html</id>
    <published>2014-12-05T11:15:12.000Z</published>
    <updated>2017-05-14T12:31:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直使用的 ADT + Intellij, 用起来也算安逸，导入导出依赖配置和 Eclipse 没什么区别。但是在多人协作开发时依赖的配置很麻烦。多次尝试切换到 Gradle 都出错告终。   </p><p>大部分依赖提供jcenter 别名, 只要 在 <code>build.gradle</code> 的 <code>dependencies</code> 中添加<br><code>compile &#39;com.jakewharton:butterknife:6.0.0&#39;</code></p><p>但是一些没有推送到 jcenter 的项目按照之前的 <code>Import Module</code> 导入时总会导致原先的项目混乱。</p><p>参考 StackOverflow 上的一篇问答 <a href="http://stackoverflow.com/questions/24456192/android-studio-import-module-changes-structure-of-existing-library" target="_blank" rel="noopener">“Import Module” changes structure of existing library</a></p><ol><li>Copied library’s directory under the root directory of my project. </li><li>Referenced that library in settings.gradle by adding include ‘:libraryA’.</li><li>Added dependency to my project’s build.gradle: compile project(‘:libraryA’).   </li></ol><hr><p>ADT 模式下 Intellij 导入 ArcGIS Android SDK 的方式可以参考官方博客<a href="http://blogs.esri.com/esri/arcgis/2013/10/31/arcgis-android-development-with-intellij-idea/" target="_blank" rel="noopener">ArcGIS Android development with IntelliJ IDEA</a>。</p><p>Gradle 方式官方在 GitHub 上有介绍 <a href="https://github.com/Esri/arcgis-android-api-lib-module" target="_blank" rel="noopener">ArcGIS Android API Lib Module</a>，但是说明版本太旧，按照说明无法导入。</p><h3 id="下面是测试可行的导入方式"><a href="#下面是测试可行的导入方式" class="headerlink" title="下面是测试可行的导入方式"></a>下面是测试可行的导入方式</h3><a id="more"></a><ol><li><p>整个 Project 中有 <strong>三</strong>个 <code>build.gradle</code>, <strong>一</strong>个 <code>settings.gradle</code> 每步需要的修改的依赖不能乱。配置之前记得把项目提交到 git 仓库,  万一出错checkout回来就好了。</p></li><li><p>获取依赖项目<br>可以直接<a href="https://github.com/Esri/arcgis-android-api-lib-module/archive/master.zip" target="_blank" rel="noopener">下载</a><br>推荐使用 git <code>git clone  git@github.com:Esri/arcgis-android-api-lib-module.git --depth=1</code></p></li><li><p>复制 <code>arcgis-android-v10.2.4</code> 到项目目录<br><img src="http://ww3.sinaimg.cn/large/c0f281e2tw1emyzyl4o2lj207305wwen.jpg" alt=""></p></li><li><p><code>settings.gradle</code>  中添加 <code>include &#39;:arcgis-android-v10.2.4&#39;</code><br><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1emz0357bauj20fl0apwfi.jpg" alt=""></p></li><li><p><strong>要添加依赖的module的</strong> build.gradle 中的<code>dependencies</code> 添加 <code>compile project(&quot;:arcgis-android-v10.2.4&quot;)</code><br><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1emz06w0r3gj20k30aota3.jpg" alt=""></p></li><li><p><strong>其他注意</strong> ArcGIS Android 10.2.4 (Gradle) 中 <code>classpath &#39;com.android.tools.build:gradle:0.14.1&#39;</code> 版本为 0.14.1 对于 0.14.0 之后的版本 runProguard 替换为 minifyEnabled 如果你的版本低于14则 arcgis-android-v10.2.4 中的 build.gradle 中的 minifyEnabled()会提示找不到，只要替换就好。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直使用的 ADT + Intellij, 用起来也算安逸，导入导出依赖配置和 Eclipse 没什么区别。但是在多人协作开发时依赖的配置很麻烦。多次尝试切换到 Gradle 都出错告终。   &lt;/p&gt;
&lt;p&gt;大部分依赖提供jcenter 别名, 只要 在 &lt;code&gt;build.gradle&lt;/code&gt; 的 &lt;code&gt;dependencies&lt;/code&gt; 中添加&lt;br&gt;&lt;code&gt;compile &amp;#39;com.jakewharton:butterknife:6.0.0&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是一些没有推送到 jcenter 的项目按照之前的 &lt;code&gt;Import Module&lt;/code&gt; 导入时总会导致原先的项目混乱。&lt;/p&gt;
&lt;p&gt;参考 StackOverflow 上的一篇问答 &lt;a href=&quot;http://stackoverflow.com/questions/24456192/android-studio-import-module-changes-structure-of-existing-library&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“Import Module” changes structure of existing library&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copied library’s directory under the root directory of my project. &lt;/li&gt;
&lt;li&gt;Referenced that library in settings.gradle by adding include ‘:libraryA’.&lt;/li&gt;
&lt;li&gt;Added dependency to my project’s build.gradle: compile project(‘:libraryA’).   &lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;ADT 模式下 Intellij 导入 ArcGIS Android SDK 的方式可以参考官方博客&lt;a href=&quot;http://blogs.esri.com/esri/arcgis/2013/10/31/arcgis-android-development-with-intellij-idea/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ArcGIS Android development with IntelliJ IDEA&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Gradle 方式官方在 GitHub 上有介绍 &lt;a href=&quot;https://github.com/Esri/arcgis-android-api-lib-module&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ArcGIS Android API Lib Module&lt;/a&gt;，但是说明版本太旧，按照说明无法导入。&lt;/p&gt;
&lt;h3 id=&quot;下面是测试可行的导入方式&quot;&gt;&lt;a href=&quot;#下面是测试可行的导入方式&quot; class=&quot;headerlink&quot; title=&quot;下面是测试可行的导入方式&quot;&gt;&lt;/a&gt;下面是测试可行的导入方式&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
      <category term="ArcGIS" scheme="http://blog.xiazhiri.com/tags/ArcGIS/"/>
    
      <category term="Intellij" scheme="http://blog.xiazhiri.com/tags/Intellij/"/>
    
  </entry>
  
  <entry>
    <title>Vim中的正则与多文件搜索、批量替换</title>
    <link href="http://blog.xiazhiri.com/vim-regex-search-replace.html"/>
    <id>http://blog.xiazhiri.com/vim-regex-search-replace.html</id>
    <published>2014-11-14T12:52:50.000Z</published>
    <updated>2017-05-14T12:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要处理一些 html 文件,目的说起来很简单：去掉其中的几个特定的 div。<br>对于 Windows 用户，多文件搜索推荐 <a href="http://www.appinn.com/filelocator-pro-gift/" target="_blank" rel="noopener">FileLocator Pro</a>，正则处理推荐 <a href="http://www.cnblogs.com/Fooo/archive/2008/08/28/1278755.html" target="_blank" rel="noopener">RegexBuddy</a><br>两个软件相对于 Vim 更加人性化。<br>脱离 Win 之后没有了趁手的工具，只能捡起 Vim 这个宰牛刀……</p><h3 id="vim中的正则与常用的正则有些出入："><a href="#vim中的正则与常用的正则有些出入：" class="headerlink" title="vim中的正则与常用的正则有些出入："></a>vim中的正则与常用的正则有些出入：</h3><ul><li><code>\.</code>  匹配任意字符(<strong>不包含</strong>换行)</li><li><code>\_.</code>  匹配任意字符(包含换行)</li><li><code>\{-}</code>  表示懒惰模式<br>具体 <code>:h regexp</code></li></ul><h3 id="以替换多行注释为例-lt-多行注释-gt"><a href="#以替换多行注释为例-lt-多行注释-gt" class="headerlink" title="以替换多行注释为例 &lt;!-- 多行注释 --&gt;"></a>以替换多行注释为例 <code>&lt;!-- 多行注释 --&gt;</code></h3><ol><li><p>定位到指定目录<br><code>:cd /target/folder</code></p></li><li><p>打开单个文件<br><code>e: target.html</code></p></li><li><p>测试匹配<br><code>/&lt;!--\_.\{-}--&gt;</code> 多行注释<br><code>/&lt;!--.\{-}--&gt;</code>  单行注释</p></li><li><p>多文件搜索<br><code>:vimgrep /test/ **/*.html</code>  当前目录和子目录<br><code>:vimgrep /test/ *.html</code> 当前目录<br><code>:vimgrep /test/ subfolder/*</code> 子目录<br>vimgrep 之后可以 <code>:copen</code> 打开 quickfix 查看匹配的列表</p></li><li><p>批量替换</p></li></ol><ul><li>添加文件 <code>:args **/*.html</code></li><li>批量替换 <code>:argdo %s/cha1/cha2/ | update</code></li></ul><a id="more"></a><hr><h4 id="更多："><a href="#更多：" class="headerlink" title="更多："></a>更多：</h4><ul><li>\? 匹配0或1次</li><li>引用 <code>:%s/&lt;h\(\d\)&gt;/head\1/g</code>把 <code>&lt;h1&gt;&lt;h2&gt;&lt;h3&gt;</code> 替换为head1 head2 head3</li><li><p>断言:</p><ol><li><p><code>\zs</code>  匹配开始<br>/hello <code>\zs</code>world<br>匹配<code>hello world</code>中的<code>world</code>, 其他的如<code>my world</code>不匹配</p></li><li><p><code>\ze</code>  匹配结束<br>/hello<code>\ze</code> world<br>匹配<code>hello world</code> 中的 <code>hello</code>, 其他的如 <code>hello kitty</code> 不匹配</p></li></ol></li><li><p>/&lt;\/<code>\?</code>h<code>\zs</code>\d<code>\ze</code>&gt; 用来匹配  <code>&lt;h1&gt;&lt;/h1&gt; &lt;h2&gt;&lt;/h3&gt;</code>中的 1 1 2 3 数字</p></li></ul><p>暂时就是这些。</p><h4 id="参见："><a href="#参见：" class="headerlink" title="参见："></a>参见：</h4><p><a href="http://blog.chinaunix.net/uid-23381466-id-93905.html" target="_blank" rel="noopener">vim 查找多个文件, 替换</a> @wangchenxicool</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要处理一些 html 文件,目的说起来很简单：去掉其中的几个特定的 div。&lt;br&gt;对于 Windows 用户，多文件搜索推荐 &lt;a href=&quot;http://www.appinn.com/filelocator-pro-gift/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FileLocator Pro&lt;/a&gt;，正则处理推荐 &lt;a href=&quot;http://www.cnblogs.com/Fooo/archive/2008/08/28/1278755.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RegexBuddy&lt;/a&gt;&lt;br&gt;两个软件相对于 Vim 更加人性化。&lt;br&gt;脱离 Win 之后没有了趁手的工具，只能捡起 Vim 这个宰牛刀……&lt;/p&gt;
&lt;h3 id=&quot;vim中的正则与常用的正则有些出入：&quot;&gt;&lt;a href=&quot;#vim中的正则与常用的正则有些出入：&quot; class=&quot;headerlink&quot; title=&quot;vim中的正则与常用的正则有些出入：&quot;&gt;&lt;/a&gt;vim中的正则与常用的正则有些出入：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\.&lt;/code&gt;  匹配任意字符(&lt;strong&gt;不包含&lt;/strong&gt;换行)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\_.&lt;/code&gt;  匹配任意字符(包含换行)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\{-}&lt;/code&gt;  表示懒惰模式&lt;br&gt;具体 &lt;code&gt;:h regexp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;以替换多行注释为例-lt-多行注释-gt&quot;&gt;&lt;a href=&quot;#以替换多行注释为例-lt-多行注释-gt&quot; class=&quot;headerlink&quot; title=&quot;以替换多行注释为例 &amp;lt;!-- 多行注释 --&amp;gt;&quot;&gt;&lt;/a&gt;以替换多行注释为例 &lt;code&gt;&amp;lt;!-- 多行注释 --&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定位到指定目录&lt;br&gt;&lt;code&gt;:cd /target/folder&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开单个文件&lt;br&gt;&lt;code&gt;e: target.html&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试匹配&lt;br&gt;&lt;code&gt;/&amp;lt;!--\_.\{-}--&amp;gt;&lt;/code&gt; 多行注释&lt;br&gt;&lt;code&gt;/&amp;lt;!--.\{-}--&amp;gt;&lt;/code&gt;  单行注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多文件搜索&lt;br&gt;&lt;code&gt;:vimgrep /test/ **/*.html&lt;/code&gt;  当前目录和子目录&lt;br&gt;&lt;code&gt;:vimgrep /test/ *.html&lt;/code&gt; 当前目录&lt;br&gt;&lt;code&gt;:vimgrep /test/ subfolder/*&lt;/code&gt; 子目录&lt;br&gt;vimgrep 之后可以 &lt;code&gt;:copen&lt;/code&gt; 打开 quickfix 查看匹配的列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;批量替换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;添加文件 &lt;code&gt;:args **/*.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;批量替换 &lt;code&gt;:argdo %s/cha1/cha2/ | update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Vim" scheme="http://blog.xiazhiri.com/tags/Vim/"/>
    
      <category term="Regex" scheme="http://blog.xiazhiri.com/tags/Regex/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS 制作 tpk</title>
    <link href="http://blog.xiazhiri.com/arcgis-generate-tpk.html"/>
    <id>http://blog.xiazhiri.com/arcgis-generate-tpk.html</id>
    <published>2014-11-08T06:17:52.000Z</published>
    <updated>2017-05-14T12:32:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>官方博客在12年曾经介绍过 <a href="http://blog.csdn.net/arcgis_mobile/article/details/8048549" target="_blank" rel="noopener">3种方法快速制作tpk文件</a> ，当时的 ArcMap 版本为 10.1，本文在 ArcMap10.2.1 下仅做补充。</p><h3 id="1-制作指定坐标系的tpk"><a href="#1-制作指定坐标系的tpk" class="headerlink" title="1.制作指定坐标系的tpk"></a>1.制作指定坐标系的tpk</h3><ul><li>如果直接 File – Share As – Tile Package, 只需要在 TileFormat 中指定 tiling &gt;Scheme File<br><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1em3ktsjg6oj20kn05zt9a.jpg" alt=""></li><li><p>如果是使用GP工具，则在设置页面<strong>不勾选</strong> Package for ArcGIS…然后在Service 选择对应xml<br><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1em3l62hjxbj20kx08k76d.jpg" alt=""></p></li><li><p><strong>制作 Tiling Scheme file</strong><br>Search – tiling – Generate Tile Cache Tiling Scheme<br><img src="http://ww4.sinaimg.cn/large/c0f281e2tw1em3lapfa2pj20cb05j3z5.jpg" alt=""></p></li></ul><a id="more"></a><hr><h3 id="2-指定线程数制作tpk-多个线程同时切图"><a href="#2-指定线程数制作tpk-多个线程同时切图" class="headerlink" title="2.指定线程数制作tpk (多个线程同时切图)"></a>2.指定线程数制作tpk (多个线程同时切图)</h3><p>默认的 Share As 和 GP工具 采用两个线程切图，没有充分利用硬件。<br>GP工具中Parallel Processing 指定线程数即可<br><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1em3lk7jykfj20dd0713za.jpg" alt=""></p><hr><h3 id="3-推荐方案"><a href="#3-推荐方案" class="headerlink" title="3.推荐方案"></a>3.推荐方案</h3><p>先制作紧凑切片再导出为tpk，和官方博客中提到的最后一种方法类似，不过不再是手动制作。</p><ul><li><p>首先制作紧凑型切片，参数可以设置指定坐标系、比例尺范围、切图范围<br>Search – Manage Tile Cache<br><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1em3m60cpkzj20ki0dq421.jpg" alt=""></p></li><li><p>导出tpk<br>Search – Export Tile Cache<br><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1em3ma77y1kj20fe0erdho.jpg" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方博客在12年曾经介绍过 &lt;a href=&quot;http://blog.csdn.net/arcgis_mobile/article/details/8048549&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3种方法快速制作tpk文件&lt;/a&gt; ，当时的 ArcMap 版本为 10.1，本文在 ArcMap10.2.1 下仅做补充。&lt;/p&gt;
&lt;h3 id=&quot;1-制作指定坐标系的tpk&quot;&gt;&lt;a href=&quot;#1-制作指定坐标系的tpk&quot; class=&quot;headerlink&quot; title=&quot;1.制作指定坐标系的tpk&quot;&gt;&lt;/a&gt;1.制作指定坐标系的tpk&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果直接 File – Share As – Tile Package, 只需要在 TileFormat 中指定 tiling &amp;gt;Scheme File&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/c0f281e2tw1em3ktsjg6oj20kn05zt9a.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是使用GP工具，则在设置页面&lt;strong&gt;不勾选&lt;/strong&gt; Package for ArcGIS…然后在Service 选择对应xml&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/c0f281e2tw1em3l62hjxbj20kx08k76d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;制作 Tiling Scheme file&lt;/strong&gt;&lt;br&gt;Search – tiling – Generate Tile Cache Tiling Scheme&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/c0f281e2tw1em3lapfa2pj20cb05j3z5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.xiazhiri.com/tags/Android/"/>
    
      <category term="ArcGIS" scheme="http://blog.xiazhiri.com/tags/ArcGIS/"/>
    
      <category term="tpk" scheme="http://blog.xiazhiri.com/tags/tpk/"/>
    
  </entry>
  
  <entry>
    <title>提高效率的几个软件(2)</title>
    <link href="http://blog.xiazhiri.com/efficient-software-2.html"/>
    <id>http://blog.xiazhiri.com/efficient-software-2.html</id>
    <published>2014-07-30T11:58:33.000Z</published>
    <updated>2017-05-14T12:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="个人观点，看看就好。"><a href="#个人观点，看看就好。" class="headerlink" title="个人观点，看看就好。"></a>个人观点，看看就好。</h3><hr><h2 id="1-goagent免费翻墙利器"><a href="#1-goagent免费翻墙利器" class="headerlink" title="1.goagent免费翻墙利器"></a>1.goagent免费翻墙利器</h2><p>不会翻墙的程序员不是好程序员，有了它就可以访问<strong>不存在的</strong>网站。<br>相比StackOverflow 百度知道就是个x，还有维基百科和百度百科、谷歌和百度……<br><a href="http://wildcat.name/goagent.html" target="_blank" rel="noopener">介绍地址</a></p><blockquote><p><img src="http://ww4.sinaimg.cn/large/c0f281e2tw1eiuz78ygarj20qd0cvgo2.jpg" alt=""></p></blockquote><a id="more"></a><hr><h2 id="2-ditto-剪贴板增强工具"><a href="#2-ditto-剪贴板增强工具" class="headerlink" title="2.ditto 剪贴板增强工具"></a>2.ditto 剪贴板增强工具</h2><p>可以记录下剪贴板的历史记录，更神奇的是它还可以使用<strong>Listary</strong>过滤。<br>复制粘贴多处内容时，不用多个窗口来回切换了。<br><a href="http://xbeta.info/ditto.htm" target="_blank" rel="noopener">介绍地址</a></p><blockquote><p><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1eiuzafksfxj20as08odh0.jpg" alt=""></p></blockquote><hr><h2 id="3-ProcessLasso-进程级系统优化工具"><a href="#3-ProcessLasso-进程级系统优化工具" class="headerlink" title="3.ProcessLasso 进程级系统优化工具"></a>3.ProcessLasso 进程级系统优化工具</h2><p>可以调整进程的优先级，即使CPU占用90+%，也能做到前台程序不卡。<br><a href="http://www.portablesoft.org/process-lasso/" target="_blank" rel="noopener">介绍地址</a></p><blockquote><p><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1eiuzjsxxnoj20gq0ggn0b.jpg" alt=""></p></blockquote><hr><h2 id="4-StrokeIt-鼠标手势"><a href="#4-StrokeIt-鼠标手势" class="headerlink" title="4.StrokeIt 鼠标手势"></a>4.StrokeIt 鼠标手势</h2><p>鼠标手势增强工具，<a href="http://xbeta.info/strokeit.htm" target="_blank" rel="noopener">介绍地址</a>。</p><hr><h2 id="5-MacType-字体美化增强"><a href="#5-MacType-字体美化增强" class="headerlink" title="5.MacType 字体美化增强"></a>5.MacType 字体美化增强</h2><p><a href="http://www.iplaysoft.com/mactype.html" target="_blank" rel="noopener">介绍地址</a></p><blockquote><p><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1eiv2y2vetwj20lf086wgz.jpg" alt=""></p></blockquote><h2 id="6-Chrome"><a href="#6-Chrome" class="headerlink" title="6.Chrome"></a>6.Chrome</h2><p>和火狐一样，如果不加插件。甚至不如IE和xx急速、xx高速浏览器。<br>主要插件介绍 <strong>注意Chrome商店必须翻墙后才能访问。</strong></p><hr><p><a href="https://chrome.google.com/webstore/detail/dpplabbmogkhghncfbfdeeokoefdjegm" target="_blank" rel="noopener">Proxy SwitchySharp</a> : 配合goagent使用，自动切换代理。无痛翻墙。</p><blockquote><p><img src="http://ww4.sinaimg.cn/large/c0f281e2tw1eiv1mkoxusj20lp0awjsr.jpg" alt=""></p></blockquote><hr><p><a href="https://chrome.google.com/webstore/detail/hdokiejnpimakedhajhdlcegeplioahd" target="_blank" rel="noopener">LastPass</a> : 跨平台的密码管理工具，自动填表，自动登陆，生成密码。手机上同样可以使用。</p><blockquote><p><img src="http://ww3.sinaimg.cn/large/c0f281e2tw1eiv14ba3utj209s0e53z8.jpg" alt=""></p></blockquote><hr><p><a href="https://chrome.google.com/webstore/detail/ie-tab-multi-enhance/fnfnbeppfinmnjnjhedifcfllpcfgeea#" target="_blank" rel="noopener">IE Tab Multi</a> : Chrome中模拟IE，可以同步Cookies。</p><hr><p><a href="https://chrome.google.com/webstore/detail/lazarus-form-recovery/loljledaigphbcpfhfmgopdkppkifgno" target="_blank" rel="noopener">Lazarus</a> : 表单恢复工具，发帖或者注册账号时不小心关闭了网站，辛辛苦苦填的内容可以用它恢复回来。</p><blockquote><p><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1eiv1bxjp62g20bf03d75x.gif" alt=""></p></blockquote><hr><p><a href="https://chrome.google.com/webstore/detail/njeebknkghnjbobnghdlfgfaigkjciih" target="_blank" rel="noopener">易词典</a> : 双击翻译，划词翻译。</p><blockquote><p><img src="http://ww4.sinaimg.cn/large/c0f281e2tw1eiv1ix27bnj20br04paai.jpg" alt=""></p></blockquote><hr><p><a href="https://chrome.google.com/webstore/detail/fcihnniakiicgonogcieldhhjbgpnjpj" target="_blank" rel="noopener">有道智能翻译</a> : 类似阅读理解的那种效果，难词生词加括号注释。</p><blockquote><p><img src="http://ww3.sinaimg.cn/large/c0f281e2tw1eiv1pps5jyj20b907k75e.jpg" alt=""></p></blockquote><hr><p><a href="https://chrome.google.com/webstore/detail/%E7%99%BE%E5%BA%A6%E8%B0%B7%E6%AD%8C%E4%B8%80%E9%94%AE%E5%88%87%E6%8D%A2/fknieppmhfgnjilnkdeoegocjkijpbfh" target="_blank" rel="noopener">百度谷歌一键切换</a> : 点击地址栏图标就可以在两个搜索结果中切换。</p><blockquote><p><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1eiv1t3fenfg20e50cm12u.gif" alt=""></p></blockquote><hr><p><a href="https://chrome.google.com/webstore/detail/aognaapdfnnldnjglanfbbklaakbpejm" target="_blank" rel="noopener">眼不见心不烦</a> : 刷微博必备……</p><hr><p><a href="https://chrome.google.com/webstore/detail/kllbckciimnnjhkefeobpbmbmpjenoid" target="_blank" rel="noopener">聚搜索</a> : 划词搜索。</p><blockquote><p><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1eiv285wsfkj20hg06yaba.jpg" alt=""></p></blockquote><hr><p><a href="https://chrome.google.com/webstore/detail/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/ohjkicjidmohhfcjjlahfppkdblibkkb" target="_blank" rel="noopener">惠惠购物助手</a> : 网购必备……可以显示历史报价，其他商城的价格。</p><blockquote><p><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1eiv28irva2j20d806xaaj.jpg" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;个人观点，看看就好。&quot;&gt;&lt;a href=&quot;#个人观点，看看就好。&quot; class=&quot;headerlink&quot; title=&quot;个人观点，看看就好。&quot;&gt;&lt;/a&gt;个人观点，看看就好。&lt;/h3&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-goagent免费翻墙利器&quot;&gt;&lt;a href=&quot;#1-goagent免费翻墙利器&quot; class=&quot;headerlink&quot; title=&quot;1.goagent免费翻墙利器&quot;&gt;&lt;/a&gt;1.goagent免费翻墙利器&lt;/h2&gt;&lt;p&gt;不会翻墙的程序员不是好程序员，有了它就可以访问&lt;strong&gt;不存在的&lt;/strong&gt;网站。&lt;br&gt;相比StackOverflow 百度知道就是个x，还有维基百科和百度百科、谷歌和百度……&lt;br&gt;&lt;a href=&quot;http://wildcat.name/goagent.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;介绍地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/c0f281e2tw1eiuz78ygarj20qd0cvgo2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="SoftWare" scheme="http://blog.xiazhiri.com/tags/SoftWare/"/>
    
  </entry>
  
  <entry>
    <title>提高效率的几个软件</title>
    <link href="http://blog.xiazhiri.com/efficient-software.html"/>
    <id>http://blog.xiazhiri.com/efficient-software.html</id>
    <published>2014-07-11T11:58:33.000Z</published>
    <updated>2017-05-14T12:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下平时开机自启动的软件，顺序就按照需要程度来吧，我也尽量贴一些GIF图片。所以图片有些大，手机党慎入。<br>只是一些浅薄的经验，如果你有好软件，也可以一起分享。<br> <a id="more"></a> </p><h2 id="1-Everything-最快的文件搜索软件"><a href="#1-Everything-最快的文件搜索软件" class="headerlink" title="1.Everything    最快的文件搜索软件"></a>1.Everything    最快的文件搜索软件</h2><p>下载地址：<a href="http://xbeta.info/everything-update.htm" target="_blank" rel="noopener">http://xbeta.info/everything-update.htm</a></p><blockquote><p><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1ei7xptnic3g20he0cwn5q.gif" alt=""></p></blockquote><hr><h2 id="2-Flux-屏幕色温调节软件"><a href="#2-Flux-屏幕色温调节软件" class="headerlink" title="2.Flux    屏幕色温调节软件"></a>2.Flux    屏幕色温调节软件</h2><p>下载地址：<a href="https://justgetflux.com/" target="_blank" rel="noopener">https://justgetflux.com/</a></p><blockquote><p>自动根据时间调整屏幕色温，长时间对着屏幕的必备工具。<br><img src="http://ww4.sinaimg.cn/large/c0f281e2tw1ei8wqf3tkvj20az05kt8t.jpg" alt=""></p></blockquote><hr><h2 id="3-Listary-跳转、列表过滤等"><a href="#3-Listary-跳转、列表过滤等" class="headerlink" title="3.Listary    跳转、列表过滤等"></a>3.Listary    跳转、列表过滤等</h2><p>难得的国人软件，下载地址：<a href="http://www.listary.com/" target="_blank" rel="noopener">http://www.listary.com/</a></p><blockquote><p>快速找到想找到的<strong>进程</strong>：<br><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1ei7xui96y3g20ed0fjah1.gif" alt=""></p></blockquote><p>-</p><blockquote><p>快速找到想找到的<strong>文件</strong>：<br><img src="http://ww4.sinaimg.cn/large/c0f281e2tw1ei7xw0fjbbg20l30fpwmr.gif" alt=""></p></blockquote><p>-</p><blockquote><p><strong>打开</strong>或<strong>另存</strong>时 快速跳转<br><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1ei93s7zcdhg20mj0f6npe.gif" alt=""></p></blockquote><hr><h2 id="4-AdSafe-广告过滤，视频广告过滤"><a href="#4-AdSafe-广告过滤，视频广告过滤" class="headerlink" title="4.AdSafe    广告过滤，视频广告过滤"></a>4.AdSafe    广告过滤，视频广告过滤</h2><p>官方主页：<a href="http://www.ad-safe.com/" target="_blank" rel="noopener">http://www.ad-safe.com/</a><br>这个没什么好说的，同类的还有Admuncher</p><hr><h2 id="5-AltRun-快速启动软件"><a href="#5-AltRun-快速启动软件" class="headerlink" title="5.AltRun 快速启动软件"></a>5.AltRun 快速启动软件</h2><p>Win平台的上的的快速启动软件大部分都体验过，最好还是这款 <a href="http://weibo.com/journeyonmyway" target="_blank" rel="noopener">@ET民工</a> 的AltRun一直用到现在，看了下，已经运行了2万多次。<br>介绍地址：<a href="http://xbeta.info/altrun.htm" target="_blank" rel="noopener">http://xbeta.info/altrun.htm</a></p><blockquote><p><img src="http://ww4.sinaimg.cn/large/c0f281e2tw1ei8xxsmvl9j20dv0b2jsp.jpg" alt=""></p></blockquote><p>-</p><blockquote><p>快速启动软件<br><img src="http://ww3.sinaimg.cn/large/c0f281e2tw1ei8xy8eh89g20jd0efk3r.gif" alt=""></p></blockquote><p>-</p><blockquote><p>它还可以和其他软件一起组合使用<br>查单词，搜文件，定闹钟。<br><img src="http://ww2.sinaimg.cn/large/c0f281e2tw1ei8ypnis61g20jd0ef4qp.gif" alt=""></p></blockquote><hr><h2 id="6-TotalCommnader-最佳文件管理器"><a href="#6-TotalCommnader-最佳文件管理器" class="headerlink" title="6.TotalCommnader  最佳文件管理器"></a>6.TotalCommnader  最佳文件管理器</h2><p>介绍地址：<a href="http://xbeta.info/studytc/index.htm" target="_blank" rel="noopener">http://xbeta.info/studytc/index.htm</a></p><blockquote><p>Win平台最佳文件管理器，没有之一。<br>十分惭愧一直用盗版。<br><img src="http://ww1.sinaimg.cn/large/c0f281e2tw1ei91pqsrjbg20gz0b6x6p.gif" alt=""></p></blockquote><hr><h2 id="7-Vim-编辑器之神"><a href="#7-Vim-编辑器之神" class="headerlink" title="7.Vim    编辑器之神"></a>7.Vim    编辑器之神</h2><p>没有图片，没法概括……<br>会用的说它是神，不会用的说它是屎。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下平时开机自启动的软件，顺序就按照需要程度来吧，我也尽量贴一些GIF图片。所以图片有些大，手机党慎入。&lt;br&gt;只是一些浅薄的经验，如果你有好软件，也可以一起分享。&lt;br&gt;
    
    </summary>
    
    
      <category term="SoftWare" scheme="http://blog.xiazhiri.com/tags/SoftWare/"/>
    
  </entry>
  
</feed>
